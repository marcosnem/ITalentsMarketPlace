Aula 01 - Iniciando o Projeto

1. Repositorio no Git

1.1 Adicionar gitignore, license e readme. Deixar o projeto publico.
1.2 Integrar pasta local com o git via VS Code

2. Criar estrutura inicial

2.1 Instalar via npm 
express
jsonwebtoken
mongoose
nodemon (com i -D)


2.2 Pastas base
src (pasta pai) dentro dela
>>model
>>controller
>>service
>>router
>>database

2.3 Arquivo index.js inicial

const express = require("express");

const app = express();

const port = 3000;

app.use(express.json());

app.get("/", (req,res) => {

    res.send({
        message:"Bem vindo ao Marketplace"
    });
})

app.listen(port, () => {
    console.log(`Servidor rodando em: http://localhost:${port}`);
})


Aula 02 - Conexão e Model Usuário

Itens a considerar
1. Criacao do usuario
2. Produto
3. Pedido
4. Categoria
5. Carrinho

OBS: Autenticação e Documentação são rotas

1. Criada a function connectToDatabase
2. Criado o Schema do Usuario
2.1 Atributo createAt serve para marcar a data que foi feita a task.
2.2 Atributo produtos_fav é para definir obj com a id da collection produtos

Aula 03 - Rotas Usuário

Adicionado no package.json os scripts para poder rodar o nodemon

"start":"node ./index.js",
"dev": "nodemon ./index.js"

1. Criação das rotas
2. Criação do usuario.controller e as funcoes baseadas nas rotas
    findUserByIdController,
    findAllUsersController,
    createUserController,
    updateUserController,
    deleteUserController,
    addUserAddressController,
    removeUserAddressController,
    addUserFavProduct,
    removeUserFavProduct,

3. Editar as rotas no usuario.router.js com as funcoes criadas acima

router.get('/findById:id', usuarioController.findUserByIdController);
router.get('/findAll', usuarioController.findAllUsersController);

router.post('/create', usuarioController.createUserController);
router.post('/addAddress/:id', usuarioController.addUserAddressController);
router.post('/addFavProduct/:id', usuarioController.addUserFavProduct);

router.put('/update/:id', usuarioController.updateUserController);

router.delete('/remove/:id', usuarioController.removeUserController);
router.delete('/removoAddress/', usuarioController.removeUserAddressController);
router.delete('/removeFavProduct', usuarioController.removeUserFavProduct);

Aula 04 Documentação e User Service

Criado o usuario.service.js, suas const e as funcoes

findUserByIdService,
findAllUsersService,
createUserService,
updateUserService,
removeUserService,
addUserAddressService,
removeUserAddressService,
addUserFavProductService,
removeUserFavProductService,

Aula 05 - User controller

padrao de cada funcao e resposta ao service do usuario no controller

const findUserByIdController = async (req,res) => {
try{
    
   const user = await userService.findUserByIdService(req.params.id);

   if(!user) {
    return res.status(404).send({message: "Usuário não encontrado"});
   }

   return res.status(200).send(user);

}catch (err){

    if(err.kind == "ObjectId"){
        console.log(err.kind == "ObjectId");
        return res.status(400).send({message: `ID incorreto, tente novamente`});
    }
    
    console.log(`erro: ${err.message}`);

    return res.status(500).send({message: `Erro inesperado, tente novamente!`});
   
}

Aula 06 - Thunder Client

Criada uma collection Market-Place, dentro dela a pasta User e os comandos no thunder para nao precisar digitar (findById e findAll, no caso)

criada um env para gravar a BaseURL e Port. Na caixa de endereço do thnder é só usar {{BaseURL}}{{Port}}/rotapadrao(no caso, usuario)/funcao-rota, não precisa inserir a URL http://localhost:3000

Aula 07

Alteracao do adddUserAddressService

// add endereco

return Usuario.findOneAndUpdate(
    {
        _id: id
    },
    {
        // push adicionar algo no objeto, sem remover
        $push: {
            
            enderecos: endereco
        }
    },
    {
//Passa o resultado crud / bruto
    rawResult: true,

    }
)

remove endereco

return Usuario.findOneAndUpdate(
    {
        _id: id,
    },
    {
        // pull para remover parte do objeto, se baseando no ID
        $pull:{
            
            enderecos: {
                _id: addressId,
            }
        }
    },
    {
//Passa o resultado crud / bruto
    rawResult: true,

    }
)

Aula 08 - Criptografia com Bcrypt

Instalacao do bcrypt

npm i bcrypt

//Usar os metodos pre do bcrypt no Schema do Usuario, antes de gerar o modelo

UsuarioSchema.pre("save", async function(next) {
if(this.senha){
//processo de embaralhar senha 10 vezes
this.senha = await bcrypt.hash(this.senha, 10);
}

next();

});

Aula 09 - Autenticação

Update com senha criptografada

UsuarioSchema.pre("findOneAndUpdate", async function(next) {
    if(this._update.senha){
    //processo de embaralhar senha 10 vezes
    this._update.senha = await bcrypt.hash(this._update.senha, 10);
    }
    
    next();
    
    });

Criada a rota login, o auth.controller e auth.service para gerar token e fazer o login do user

Aula 10 - middleware

Será acionado toda vez que uma rota for acionada

Middleware faz o verificacao dos dados do cabecalho (header),tais como:
1. Token: se está vazio, formato e se está correto
2. Dentro do payload os dados do user

As rotas get (findById e findAll) usam o authMiddleware para verificar se quem está solicitando tem permissão para pegar os dados
// rotas get
router.get('/findById/:id', authMiddleware, usuarioController.findUserByIdController);
router.get('/findAll', authMiddleware, usuarioController.findAllUsersController);

Aula 11 - DotEnv e Produto

Parte 1

DoEnv que vai usar a chave(secret) em execucao de memoria, não mais no codigo, em auth.service:

const generateToken = (userId) => jwt.sign({id: userId}, "642ec99aa126e2d64d125f17", {expiresIn: 86400});

Instalacao do DotEnv

npm i DotEnv

criar arquivo .env e .env.example na raiz do projeto

alterado database o caminho do bd por process.env.URLDATABASE

Adicionado no index.js o require("dotenv").config(); para configurar a conexao antes de conectar

substituido a senha nos arquivos auth.service e authmiddleware para process.env.SECRET

Parte 2

Criacao do estrutura do produtos

model/Produto.js
service/produto.js
controller/produto.controller.js
router/produto.router.js

Model do produto

Aula 12 CRUD produto

Aula 13 Categoria

Caminho para criacao 

model > Service > controller >  ROUTER > INDEX.js











